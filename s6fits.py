# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _s6fits
else:
    import _s6fits

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _s6fits.delete_SwigPyIterator

    def value(self):
        return _s6fits.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _s6fits.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _s6fits.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _s6fits.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _s6fits.SwigPyIterator_equal(self, x)

    def copy(self):
        return _s6fits.SwigPyIterator_copy(self)

    def next(self):
        return _s6fits.SwigPyIterator_next(self)

    def __next__(self):
        return _s6fits.SwigPyIterator___next__(self)

    def previous(self):
        return _s6fits.SwigPyIterator_previous(self)

    def advance(self, n):
        return _s6fits.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _s6fits.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _s6fits.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _s6fits.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _s6fits.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _s6fits.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _s6fits.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _s6fits:
_s6fits.SwigPyIterator_swigregister(SwigPyIterator)

class s6hits_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    julian_date = property(_s6fits.s6hits_t_julian_date_get, _s6fits.s6hits_t_julian_date_set)
    unix_time = property(_s6fits.s6hits_t_unix_time_get, _s6fits.s6hits_t_unix_time_set)
    bors = property(_s6fits.s6hits_t_bors_get, _s6fits.s6hits_t_bors_set)
    ra = property(_s6fits.s6hits_t_ra_get, _s6fits.s6hits_t_ra_set)
    dec = property(_s6fits.s6hits_t_dec_get, _s6fits.s6hits_t_dec_set)
    missedpk = property(_s6fits.s6hits_t_missedpk_get, _s6fits.s6hits_t_missedpk_set)
    detected_power = property(_s6fits.s6hits_t_detected_power_get, _s6fits.s6hits_t_detected_power_set)
    mean_power = property(_s6fits.s6hits_t_mean_power_get, _s6fits.s6hits_t_mean_power_set)
    fine_channel_bin = property(_s6fits.s6hits_t_fine_channel_bin_get, _s6fits.s6hits_t_fine_channel_bin_set)
    coarse_channel_bin = property(_s6fits.s6hits_t_coarse_channel_bin_get, _s6fits.s6hits_t_coarse_channel_bin_set)
    user_flag = property(_s6fits.s6hits_t_user_flag_get, _s6fits.s6hits_t_user_flag_set)
    ifreq = property(_s6fits.s6hits_t_ifreq_get, _s6fits.s6hits_t_ifreq_set)
    rfreq = property(_s6fits.s6hits_t_rfreq_get, _s6fits.s6hits_t_rfreq_set)
    rf_reference = property(_s6fits.s6hits_t_rf_reference_get, _s6fits.s6hits_t_rf_reference_set)

    def __init__(self):
        _s6fits.s6hits_t_swiginit(self, _s6fits.new_s6hits_t())
    __swig_destroy__ = _s6fits.delete_s6hits_t

# Register s6hits_t in _s6fits:
_s6fits.s6hits_t_swigregister(s6hits_t)

class s6ccpowers_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    julian_date = property(_s6fits.s6ccpowers_t_julian_date_get, _s6fits.s6ccpowers_t_julian_date_set)
    unix_time = property(_s6fits.s6ccpowers_t_unix_time_get, _s6fits.s6ccpowers_t_unix_time_set)
    ra = property(_s6fits.s6ccpowers_t_ra_get, _s6fits.s6ccpowers_t_ra_set)
    dec = property(_s6fits.s6ccpowers_t_dec_get, _s6fits.s6ccpowers_t_dec_set)
    beam = property(_s6fits.s6ccpowers_t_beam_get, _s6fits.s6ccpowers_t_beam_set)
    coarse_channel_bin = property(_s6fits.s6ccpowers_t_coarse_channel_bin_get, _s6fits.s6ccpowers_t_coarse_channel_bin_set)
    power_x = property(_s6fits.s6ccpowers_t_power_x_get, _s6fits.s6ccpowers_t_power_x_set)
    power_y = property(_s6fits.s6ccpowers_t_power_y_get, _s6fits.s6ccpowers_t_power_y_set)

    def __init__(self):
        _s6fits.s6ccpowers_t_swiginit(self, _s6fits.new_s6ccpowers_t())
    __swig_destroy__ = _s6fits.delete_s6ccpowers_t

# Register s6ccpowers_t in _s6fits:
_s6fits.s6ccpowers_t_swigregister(s6ccpowers_t)

class s6hitsheader_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    julian_date = property(_s6fits.s6hitsheader_t_julian_date_get, _s6fits.s6hitsheader_t_julian_date_set)
    unix_time = property(_s6fits.s6hitsheader_t_unix_time_get, _s6fits.s6hitsheader_t_unix_time_set)
    ra = property(_s6fits.s6hitsheader_t_ra_get, _s6fits.s6hitsheader_t_ra_set)
    dec = property(_s6fits.s6hitsheader_t_dec_get, _s6fits.s6hitsheader_t_dec_set)
    bors = property(_s6fits.s6hitsheader_t_bors_get, _s6fits.s6hitsheader_t_bors_set)
    nhits = property(_s6fits.s6hitsheader_t_nhits_get, _s6fits.s6hitsheader_t_nhits_set)
    missedpk = property(_s6fits.s6hitsheader_t_missedpk_get, _s6fits.s6hitsheader_t_missedpk_set)

    def __init__(self):
        _s6fits.s6hitsheader_t_swiginit(self, _s6fits.new_s6hitsheader_t())
    __swig_destroy__ = _s6fits.delete_s6hitsheader_t

# Register s6hitsheader_t in _s6fits:
_s6fits.s6hitsheader_t_swigregister(s6hitsheader_t)

class s6dataspec_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    filename = property(_s6fits.s6dataspec_t_filename_get, _s6fits.s6dataspec_t_filename_set)
    telescope = property(_s6fits.s6dataspec_t_telescope_get, _s6fits.s6dataspec_t_telescope_set)
    s6hits = property(_s6fits.s6dataspec_t_s6hits_get, _s6fits.s6dataspec_t_s6hits_set)
    s6ccpowers = property(_s6fits.s6dataspec_t_s6ccpowers_get, _s6fits.s6dataspec_t_s6ccpowers_set)
    s6hitsheaders = property(_s6fits.s6dataspec_t_s6hitsheaders_get, _s6fits.s6dataspec_t_s6hitsheaders_set)
    sortby_ifreq = property(_s6fits.s6dataspec_t_sortby_ifreq_get, _s6fits.s6dataspec_t_sortby_ifreq_set)
    sortby_rfreq = property(_s6fits.s6dataspec_t_sortby_rfreq_get, _s6fits.s6dataspec_t_sortby_rfreq_set)
    sortby_time = property(_s6fits.s6dataspec_t_sortby_time_get, _s6fits.s6dataspec_t_sortby_time_set)
    sortby_bors = property(_s6fits.s6dataspec_t_sortby_bors_get, _s6fits.s6dataspec_t_sortby_bors_set)
    filterby_rf_reference_mode = property(_s6fits.s6dataspec_t_filterby_rf_reference_mode_get, _s6fits.s6dataspec_t_filterby_rf_reference_mode_set)
    filter_percent = property(_s6fits.s6dataspec_t_filter_percent_get, _s6fits.s6dataspec_t_filter_percent_set)
    total_missedpk = property(_s6fits.s6dataspec_t_total_missedpk_get, _s6fits.s6dataspec_t_total_missedpk_set)
    threshold = property(_s6fits.s6dataspec_t_threshold_get, _s6fits.s6dataspec_t_threshold_set)
    rf_reference_mode = property(_s6fits.s6dataspec_t_rf_reference_mode_get, _s6fits.s6dataspec_t_rf_reference_mode_set)
    bors = property(_s6fits.s6dataspec_t_bors_get, _s6fits.s6dataspec_t_bors_set)
    channels = property(_s6fits.s6dataspec_t_channels_get, _s6fits.s6dataspec_t_channels_set)
    errorcode = property(_s6fits.s6dataspec_t_errorcode_get, _s6fits.s6dataspec_t_errorcode_set)
    ciftsio_error = property(_s6fits.s6dataspec_t_ciftsio_error_get, _s6fits.s6dataspec_t_ciftsio_error_set)

    def __init__(self):
        _s6fits.s6dataspec_t_swiginit(self, _s6fits.new_s6dataspec_t())
    __swig_destroy__ = _s6fits.delete_s6dataspec_t

# Register s6dataspec_t in _s6fits:
_s6fits.s6dataspec_t_swigregister(s6dataspec_t)


def get_s6data(s6dataspec):
    return _s6fits.get_s6data(s6dataspec)

def get_s6ccpowers(s6dataspec):
    return _s6fits.get_s6ccpowers(s6dataspec)

def get_s6hitsheaders(s6dataspec):
    return _s6fits.get_s6hitsheaders(s6dataspec)

def get_time_over_file(filename):
    return _s6fits.get_time_over_file(filename)

def get_hits_over_file(filename):
    return _s6fits.get_hits_over_file(filename)

def print_hits_structure(s6hits):
    return _s6fits.print_hits_structure(s6hits)

def print_hits_table(s6hits):
    return _s6fits.print_hits_table(s6hits)

def print_hits_header_table(s6hitsheaders):
    return _s6fits.print_hits_header_table(s6hitsheaders)

def print_ccpowers_table(s6ccpowers):
    return _s6fits.print_ccpowers_table(s6ccpowers)
class s6Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _s6fits.s6Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _s6fits.s6Vector___nonzero__(self)

    def __bool__(self):
        return _s6fits.s6Vector___bool__(self)

    def __len__(self):
        return _s6fits.s6Vector___len__(self)

    def __getslice__(self, i, j):
        return _s6fits.s6Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _s6fits.s6Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _s6fits.s6Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _s6fits.s6Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _s6fits.s6Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _s6fits.s6Vector___setitem__(self, *args)

    def pop(self):
        return _s6fits.s6Vector_pop(self)

    def append(self, x):
        return _s6fits.s6Vector_append(self, x)

    def empty(self):
        return _s6fits.s6Vector_empty(self)

    def size(self):
        return _s6fits.s6Vector_size(self)

    def swap(self, v):
        return _s6fits.s6Vector_swap(self, v)

    def begin(self):
        return _s6fits.s6Vector_begin(self)

    def end(self):
        return _s6fits.s6Vector_end(self)

    def rbegin(self):
        return _s6fits.s6Vector_rbegin(self)

    def rend(self):
        return _s6fits.s6Vector_rend(self)

    def clear(self):
        return _s6fits.s6Vector_clear(self)

    def get_allocator(self):
        return _s6fits.s6Vector_get_allocator(self)

    def pop_back(self):
        return _s6fits.s6Vector_pop_back(self)

    def erase(self, *args):
        return _s6fits.s6Vector_erase(self, *args)

    def __init__(self, *args):
        _s6fits.s6Vector_swiginit(self, _s6fits.new_s6Vector(*args))

    def push_back(self, x):
        return _s6fits.s6Vector_push_back(self, x)

    def front(self):
        return _s6fits.s6Vector_front(self)

    def back(self):
        return _s6fits.s6Vector_back(self)

    def assign(self, n, x):
        return _s6fits.s6Vector_assign(self, n, x)

    def resize(self, *args):
        return _s6fits.s6Vector_resize(self, *args)

    def insert(self, *args):
        return _s6fits.s6Vector_insert(self, *args)

    def reserve(self, n):
        return _s6fits.s6Vector_reserve(self, n)

    def capacity(self):
        return _s6fits.s6Vector_capacity(self)
    __swig_destroy__ = _s6fits.delete_s6Vector

# Register s6Vector in _s6fits:
_s6fits.s6Vector_swigregister(s6Vector)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _s6fits.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _s6fits.IntVector___nonzero__(self)

    def __bool__(self):
        return _s6fits.IntVector___bool__(self)

    def __len__(self):
        return _s6fits.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _s6fits.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _s6fits.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _s6fits.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _s6fits.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _s6fits.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _s6fits.IntVector___setitem__(self, *args)

    def pop(self):
        return _s6fits.IntVector_pop(self)

    def append(self, x):
        return _s6fits.IntVector_append(self, x)

    def empty(self):
        return _s6fits.IntVector_empty(self)

    def size(self):
        return _s6fits.IntVector_size(self)

    def swap(self, v):
        return _s6fits.IntVector_swap(self, v)

    def begin(self):
        return _s6fits.IntVector_begin(self)

    def end(self):
        return _s6fits.IntVector_end(self)

    def rbegin(self):
        return _s6fits.IntVector_rbegin(self)

    def rend(self):
        return _s6fits.IntVector_rend(self)

    def clear(self):
        return _s6fits.IntVector_clear(self)

    def get_allocator(self):
        return _s6fits.IntVector_get_allocator(self)

    def pop_back(self):
        return _s6fits.IntVector_pop_back(self)

    def erase(self, *args):
        return _s6fits.IntVector_erase(self, *args)

    def __init__(self, *args):
        _s6fits.IntVector_swiginit(self, _s6fits.new_IntVector(*args))

    def push_back(self, x):
        return _s6fits.IntVector_push_back(self, x)

    def front(self):
        return _s6fits.IntVector_front(self)

    def back(self):
        return _s6fits.IntVector_back(self)

    def assign(self, n, x):
        return _s6fits.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _s6fits.IntVector_resize(self, *args)

    def insert(self, *args):
        return _s6fits.IntVector_insert(self, *args)

    def reserve(self, n):
        return _s6fits.IntVector_reserve(self, n)

    def capacity(self):
        return _s6fits.IntVector_capacity(self)
    __swig_destroy__ = _s6fits.delete_IntVector

# Register IntVector in _s6fits:
_s6fits.IntVector_swigregister(IntVector)



